# interface libs
file(GLOB INTERFACE_LIB_DIRS ${CMAKE_CURRENT_LIST_DIR}/Interface/*)
foreach(INTERFACE_LIB_DIR ${INTERFACE_LIB_DIRS})
    get_filename_component(TARGET_NAME ${INTERFACE_LIB_DIR} NAME)
    message("Configuring interface ${INTERFACE_LIB_DIR}")
    file(GLOB_RECURSE H_FILES "${INTERFACE_LIB_DIR}/*.h")
    file(GLOB_RECURSE HPP_FILES "${INTERFACE_LIB_DIR}/*.hpp")
    file(GLOB_RECURSE CPP_FILES "${INTERFACE_LIB_DIR}/*.cpp")
    file(GLOB_RECURSE CC_FILES "${INTERFACE_LIB_DIR}/*.cc")
    file(GLOB_RECURSE CU_FILES "${INTERFACE_LIB_DIR}/*.cu")

    source_group(TREE "${INTERFACE_LIB_DIR}" FILES ${H_FILES} ${HPP_FILES} ${CPP_FILES} ${CC_FILES} ${CU_FILES})

    add_library(${TARGET_NAME} INTERFACE ${HEADER_FILES} ${H_FILES} ${HPP_FILES} ${CPP_FILES} ${CC_FILES} ${CU_FILES})
    add_library(${PROJECT_NAME}::${TARGET_NAME} ALIAS ${TARGET_NAME})

    set_target_properties(${TARGET_NAME} PROPERTIES CXX_STANDARD 17)
    set_target_properties(${TARGET_NAME} PROPERTIES FOLDER Modules/Interface)
    # Link dependencies    
    target_link_libraries(${TARGET_NAME} 
        PUBLIC
              )

    target_include_directories(
      ${TARGET_NAME} 
      INTERFACE
      ${CMAKE_CURRENT_LIST_DIR}/Interface
    )
endforeach()

# static libs
file(GLOB STATIC_LIB_DIRS ${CMAKE_CURRENT_LIST_DIR}/Static/*)

foreach(STATIC_LIB_DIR ${STATIC_LIB_DIRS})
    get_filename_component(TARGET_NAME ${STATIC_LIB_DIR} NAME)
    message("Configuring static ${STATIC_LIB_DIR}")
    file(GLOB_RECURSE H_FILES "${STATIC_LIB_DIR}/*.h")
    file(GLOB_RECURSE HPP_FILES "${STATIC_LIB_DIR}/*.hpp")
    file(GLOB_RECURSE CPP_FILES "${STATIC_LIB_DIR}/*.cpp")
    file(GLOB_RECURSE CC_FILES "${STATIC_LIB_DIR}/*.cc")
    file(GLOB_RECURSE CU_FILES "${STATIC_LIB_DIR}/*.cu")

    source_group(TREE "${STATIC_LIB_DIR}" FILES ${H_FILES} ${HPP_FILES} ${CPP_FILES} ${CC_FILES} ${CU_FILES})

    add_library(${TARGET_NAME} STATIC ${HEADER_FILES} ${H_FILES} ${HPP_FILES} ${CPP_FILES} ${CC_FILES} ${CU_FILES})
    add_library(${PROJECT_NAME}::${TARGET_NAME} ALIAS ${TARGET_NAME})

    set_target_properties(${TARGET_NAME} PROPERTIES CXX_STANDARD 17)
    set_target_properties(${TARGET_NAME} PROPERTIES FOLDER Modules/Static)

    # being a cross-platform target, we enforce standards conformance on MSVC
    target_compile_options(${TARGET_NAME} PUBLIC "$<$<COMPILE_LANG_AND_ID:CXX,MSVC>:/permissive->")
    target_compile_options(${TARGET_NAME} PUBLIC "$<$<COMPILE_LANG_AND_ID:CXX,MSVC>:/WX->")

    # Link dependencies    
    target_link_libraries(${TARGET_NAME} 
        PUBLIC
              )

    target_include_directories(
      ${TARGET_NAME} 
      PUBLIC 
        $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/Static>
    )
endforeach()

# shared libs
file(GLOB SHARED_LIB_DIRS ${CMAKE_CURRENT_LIST_DIR}/Shared/*)

foreach(SHARED_LIB_DIR ${SHARED_LIB_DIRS})
    get_filename_component(TARGET_NAME ${SHARED_LIB_DIR} NAME)
    message("Configuring shared ${SHARED_LIB_DIR}")
    file(GLOB_RECURSE H_FILES "${SHARED_LIB_DIR}/*.h")
    file(GLOB_RECURSE HPP_FILES "${SHARED_LIB_DIR}/*.hpp")
    file(GLOB_RECURSE CPP_FILES "${SHARED_LIB_DIR}/*.cpp")
    file(GLOB_RECURSE CC_FILES "${SHARED_LIB_DIR}/*.cc")
    file(GLOB_RECURSE CU_FILES "${SHARED_LIB_DIR}/*.cu")

    source_group(TREE "${SHARED_LIB_DIR}" FILES ${H_FILES} ${HPP_FILES} ${CPP_FILES} ${CC_FILES} ${CU_FILES})

    add_library(${TARGET_NAME} SHARED ${HEADER_FILES}  ${H_FILES} ${HPP_FILES} ${CPP_FILES} ${CC_FILES} ${CU_FILES})
    add_library(${PROJECT_NAME}::${TARGET_NAME} ALIAS ${TARGET_NAME})

    set_target_properties(${TARGET_NAME} PROPERTIES CXX_STANDARD 17)
    set_target_properties(${TARGET_NAME} PROPERTIES FOLDER Modules/Shared)

    # being a cross-platform target, we enforce standards conformance on MSVC
    target_compile_options(${TARGET_NAME} PUBLIC "$<$<COMPILE_LANG_AND_ID:CXX,MSVC>:/permissive->")
    target_compile_options(${TARGET_NAME} PUBLIC "$<$<COMPILE_LANG_AND_ID:CXX,MSVC>:/WX->")

    # Link dependencies    
    target_link_libraries(${TARGET_NAME} 
        PUBLIC
        ${PROJECT_NAME}::Common
              )

    target_include_directories(
      ${TARGET_NAME} 
      PUBLIC 
        $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/Shared>
    )

    target_compile_definitions(${TARGET_NAME} PRIVATE DLL_EXPORT)

endforeach()
